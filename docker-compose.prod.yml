version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: helps-db-prod
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-helps}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password is required}
      POSTGRES_DB: ${POSTGRES_DB:-helps_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-helps}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped
    networks:
      - helps-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/*.jar
    image: ${DOCKER_REGISTRY:-localhost}/helps-backend:${TAG:-latest}
    container_name: helps-api-prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Spring Boot configuration
      SPRING_PROFILES_ACTIVE: prod
      SERVER_PORT: 8080
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-helps_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-helps}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      # JWT configuration
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-86400}
      # CORS configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://helps-platform.com}
      # WebSocket configuration
      WEBSOCKET_ALLOWED_ORIGINS: ${WEBSOCKET_ALLOWED_ORIGINS:-https://helps-platform.com}
      # Java options
      JAVA_OPTS: -Xms512m -Xmx1024m -XX:+UseG1GC
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1.5G
    expose:
      - 8080
    restart: unless-stopped
    networks:
      - helps-network
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Nginx reverse proxy and SSL termination
  nginx:
    image: nginx:stable-alpine
    container_name: helps-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - helps-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: helps-certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - helps-network

volumes:
  postgres_data:
    name: helps_postgres_data_prod

networks:
  helps-network:
    driver: bridge
    name: helps_network_prod